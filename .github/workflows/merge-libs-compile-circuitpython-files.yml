name: Build archives

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build_archives:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build: [default]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Write version_info
        run: |
          echo "# Added by build CI:" >> version_info.py
          echo "version = '$(git describe --tags --always)'" >> version_info.py
          echo "variant = '${{ matrix.build }}'" >> version_info.py

      - name: Install required packages
        run: sudo apt-get update && sudo apt-get -y install python3 python3-pip

      - name: JSON to variables
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: 'sources.json'
          prefix: sources

      - name: Download mpy-cross
        env:
          BUILD: ${{ matrix.build }}
        run: |
          ver=$(eval echo "\$sources_builds_${BUILD}_circuitpython")
          echo "CircuitPython version: ${ver}"
          curl "https://adafruit-circuit-python.s3.amazonaws.com/bin/mpy-cross/linux-amd64/mpy-cross-linux-amd64-${ver}.static" > mpy-cross
          chmod +x mpy-cross
          ./mpy-cross --version

      - name: Download and extract sources
        env:
          BUILD: ${{ matrix.build }}
        run: |
          for key in dmcomm_python adafruit_bundle; do
            value=$(eval echo "\$sources_builds_${BUILD}_$key")
            echo "Downloading and extracting $key..."
            wget $value -O sources_$key.zip
            unzip -q sources_$key.zip -d sources_$key
            echo "$key successfully downloaded and extracted."
          done

      - name: Merge libs
        env:
          PLATFORM: ${{ matrix.platform }}
        run: |
          cp -r sources_dmcomm_python/*/lib/* lib/
          cp -r sources_adafruit_bundle/*/lib/adafruit_minimqtt lib/
          cp -r sources_adafruit_bundle/*/lib/adafruit_display_text lib/
          cp -r sources_adafruit_bundle/*/lib/adafruit_displayio_ssd1306.mpy lib/
          cp -r sources_adafruit_bundle/*/lib/adafruit_ticks.mpy lib/
          cp -r sources_adafruit_bundle/*/lib/adafruit_connection_manager.mpy lib/
          cp -r sources_adafruit_bundle/*/lib/neopixel.mpy lib/

      - name: Compile CircuitPython files to .mpy files
        run: |
          for file in $(find ./lib -type f -name "*.py"); do
            if [ -s $file ]; then
              echo "Compiling $file..."
              ./mpy-cross $file
            else
              echo "Skipping $file because it is empty."
            fi
          done

      - name: Delete original .py files in lib/ folder, except for empty ones
        run: |
          find ./lib -type f -name "*.py" | while read file; do
            if [ -s $file ]; then
              echo "Deleting $file because it is not empty."
              rm $file
            else
              echo "Skipping $file because it is empty."
            fi
          done

      - name: Concatenate Licenses
        run: |
          echo -e "\n\n\ndmcomm-python" >> LICENSE.txt
          echo "https://github.com/dmcomm/dmcomm-python" >> LICENSE.txt
          curl https://raw.githubusercontent.com/dmcomm/dmcomm-python/main/LICENSE.txt >> LICENSE.txt
          echo -e "\n\n\nAdafruit_CircuitPython_Bundle" >> LICENSE.txt
          echo "https://github.com/adafruit/Adafruit_CircuitPython_Bundle" >> LICENSE.txt
          curl https://raw.githubusercontent.com/adafruit/Adafruit_CircuitPython_Bundle/main/LICENSE >> LICENSE.txt

      - name: Remove unnecessary files
        run: |
          rm -rf sources_dmcomm_python sources_adafruit_bundle *.zip .git .github .gitignore .pylintrc mpy-cross

      - name: Create archive
        env:
          BUILD: ${{ matrix.build }}
        run: |
          zip -r release.zip *
          if [[ $GITHUB_REF =~ refs/tags/.* ]]; then
            filename="wificom-firmware_$(echo $GITHUB_REF | awk -F/ '{print $3}')_${BUILD}.zip"
          else
            filename="wificom-firmware_${GITHUB_SHA}_${BUILD}.zip"
          fi
          mv release.zip $filename
          echo "FILENAME=$filename" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}

      - name: Configure AWS credentials
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Upload to Amazon S3
        if: github.event_name == 'push'
        run: |
          aws s3 cp ${{ env.FILENAME }} s3://wificom-lib/archives/${{ env.FILENAME }}

      - name: Attach to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.FILENAME }}
